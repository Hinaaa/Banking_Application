package com.example.backend.model;

import com.example.backend.enums.TransactionDirection;
import com.example.backend.enums.TransactionStatus;
import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;

import java.util.Date;

@Getter //lombok used to reduce complete Boiler plTW
@Setter
@Entity //it will automatically created table when not exists
@Table(name = "[transactions]") //table name
public class Transaction {
    //table I
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) //autoGenerated in database
    private Long id; //transaction id

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name="userid", nullable = false) //want user id as FK as column
    private User user;

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "account_id", nullable = false) //want account id as FK as column
    private Account account;

    //More Columns Transaction
    private Double amount;
    private String description; //e.g amount added in account or amount transferred from account
    private String transactionType; //added or transferred
    private String transactionFromToAccountDetails; //transferred from acc/card: acc card detail or transferred to

    @Temporal(TemporalType.TIMESTAMP)
    @CreationTimestamp
    private Date transactionDate;
    @Enumerated(EnumType.STRING)
    private TransactionStatus status;
    @Enumerated(EnumType.STRING)
    private TransactionDirection transactionDirection;

    public Transaction() { //Constructor
    }

    public Transaction(Double amount, String description,String transactionType,String TransactionFromToAccountDetails,Date transactionDate,TransactionStatus status, TransactionDirection transactionDirection) {
        this.amount = amount;
        this.description = description;
        this.transactionType = transactionType;
        this.transactionFromToAccountDetails = TransactionFromToAccountDetails;
        this.transactionDate = transactionDate;
        this.status = status;
        this.transactionDirection = transactionDirection;
    }
}
